package org.example;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageReplyMarkup;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

public class Bot extends TelegramLongPollingBot {
    private Long chatID;
    private Integer lastMessageId;
    private boolean isAlive;
    private Move move;


    @Override
    public String getBotUsername() {
        return "MaslyakSnakebot";
    }

    @Override
    public String getBotToken() {
        return "7283118194:AAGP5QjmCicTM3DZXkA1ZWumMPAG-g442wU";
    }

    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String text = update.getMessage().getText();
            long userId = update.getMessage().getFrom().getId();

            if (text.equals("/start")) {
                sendWelcomeMessage(userId);
            } else if (text.equals("Start")) {
                start(update);
            } else if (text.equals("‚¨áÔ∏è") || text.equals("‚¨ÖÔ∏è") || text.equals("‚û°Ô∏è") || text.equals("‚¨ÜÔ∏è")) {
                Snake.changeSide(text);
                Snake.move(this, update);
                send();
            }
        } else if (update.hasCallbackQuery()) {
            String callbackData = update.getCallbackQuery().getData();
            if (callbackData.equals("StartNew")) {
                startNewGame(update);
            }
        }
    }


    private void sendWelcomeMessage(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(getWelcomeMessage());

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add(new KeyboardButton("Start"));
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    void start(Update update) {
        Message message = update.getMessage();
        chatID = message.getChatId();
        String text = message.getText();

        if (!isAlive) {
            Snake.init();
            move = new Move(this, update);
            move.start();
            isAlive = true;
        }
        if (update.hasMessage() && update.getMessage().hasText()) {
            if (text.equals("‚¨áÔ∏è") || text.equals("‚¨ÖÔ∏è") || text.equals("‚û°Ô∏è") || text.equals("‚¨ÜÔ∏è")) {
                Snake.changeSide(text);
            }
        }
    }

    void send() {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–ª–∞–¥–∫–∏
        delete();

        // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—è
        SendMessage response = new SendMessage();
        response.setChatId(String.valueOf(chatID));
        response.setText(Snake.parseSnake()); // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—è
        response.setReplyMarkup(SettingGame.getKeyboard()); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        try {
            Message sentMessage = execute(response);
            lastMessageId = sentMessage.getMessageId(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–∑–∂–µ
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    public void sendLose(Update update) {
        isAlive = false;
        move.interrupt();

        Long userId = null;
        if (update.hasMessage()) {
            userId = update.getMessage().getFrom().getId();
        } else if (update.hasCallbackQuery()) {
            userId = update.getCallbackQuery().getFrom().getId();
        }

        if (userId != null) {
            sendText(userId, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–µ–ª—å–∑—è –≤—Ä–µ–∑–∞—Ç—å—Å—è!");
        }

        InlineKeyboardButton startButton = InlineKeyboardButton.builder()
                .text("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
                .callbackData("StartNew")
                .build();

        List<InlineKeyboardButton> rowInline = new ArrayList<>();
        rowInline.add(startButton);

        List<List<InlineKeyboardButton>> rowsInline = new ArrayList<>();
        rowsInline.add(rowInline);

        InlineKeyboardMarkup inlineKeyboardMarkup = InlineKeyboardMarkup.builder()
                .keyboard(rowsInline)
                .build();

        if (userId != null) {
            SendMessage message = SendMessage.builder()
                    .chatId(String.valueOf(userId))
                    .text("–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è")
                    .replyMarkup(inlineKeyboardMarkup)
                    .build();

            try {
                execute(message);
            } catch (TelegramApiException e) {
                e.printStackTrace();
            }
        }
    }




    public void sendText(Long who, String what) {
        SendMessage sm = SendMessage.builder()
                .chatId(who.toString())
                .text(what)
                .parseMode("Markdown")
                .build();
        try {
            execute(sm);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    void delete() {
        if (lastMessageId == null || chatID == null) return;

        DeleteMessage deleteMessage = new DeleteMessage();
        deleteMessage.setChatId(String.valueOf(chatID));
        deleteMessage.setMessageId(lastMessageId);

        try {
            execute(deleteMessage);
            lastMessageId = null;
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String getWelcomeMessage() {
        return "üêç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É '–ó–º–µ–π–∫–∞'! üéÆ\n" +
                "\n" +
                "üéØ –£–ø—Ä–∞–≤–ª—è–π –∑–º–µ–π–∫–æ–π, —Å–æ–±–∏—Ä–∞–π —è–±–ª–æ–∫–∏ üçé –∏ –Ω–µ –≤—Ä–µ–∑–∞–π—Å—è –≤ —Å—Ç–µ–Ω—ã –∏–ª–∏ –≤ —Å–µ–±—è! üò±\n" +
                "\n" +
                "üïπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:\n" +
                "‚¨ÜÔ∏è *–í–≤–µ—Ä—Ö*\n" +
                "‚¨áÔ∏è *–í–Ω–∏–∑*\n" +
                "‚¨ÖÔ∏è *–í–ª–µ–≤–æ*\n" +
                "‚û°Ô∏è *–í–ø—Ä–∞–≤–æ*\n" +
                "\n" +
                "‚ö° –ö–∞–∂–¥–æ–µ —è–±–ª–æ–∫–æ –¥–µ–ª–∞–µ—Ç —Ç–≤–æ—é –∑–º–µ–π–∫—É –¥–ª–∏–Ω–Ω–µ–µ –∏ –∏–≥—Ä—É —Å–ª–æ–∂–Ω–µ–µ! –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–±—Ä–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤! üåü\n" +
                "\n" +
                "üöÄ –ì–æ—Ç–æ–≤? –í–ø–µ—Ä—ë–¥, –∫ –ø–æ–±–µ–¥–µ! üèÜ\n";
    }



    private void startNewGame(Update update) {
        if (move != null && move.isAlive()) {
            move.interrupt();
        }

        isAlive = false;
        lastMessageId = null;

        Snake.init();
        delete();

        long userId = update.getCallbackQuery().getFrom().getId();
        sendText(userId, "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!");

        move = new Move(this, update);
        move.start();
        isAlive = true;

        send();
    }






}
